{
  "version": 3,
  "sources": ["../extension.js"],
  "sourcesContent": ["// The module 'vscode' contains the VS Code extensibility API\n// Import the module and reference it with the alias vscode in your code below\nlet vscode;\ntry {\n    vscode = global.vscode || require('vscode');\n} catch (e) {\n    // Fallback for testing environment\n    vscode = {\n        window: {\n            showInformationMessage: () => ({ dispose: () => {} }),\n            showErrorMessage: () => ({ dispose: () => {} }),\n            showWarningMessage: () => ({ dispose: () => {} }),\n            activeTextEditor: null,\n            messages: []\n        },\n        commands: {\n            registerCommand: () => {}\n        },\n        ExtensionContext: function() {}\n    };\n}\n\n/**\n * Shows a message and automatically hides it after a timeout\n * @param {string} message The message to show\n * @param {'info' | 'warning' | 'error'} type The type of message\n * @param {number} timeout Timeout in milliseconds\n */\nfunction showMessage(message, type = 'info', timeout = 3000) {\n    let disposable;\n    switch (type) {\n        case 'error':\n            disposable = vscode.window.showErrorMessage(message);\n            break;\n        case 'warning':\n            disposable = vscode.window.showWarningMessage(message);\n            break;\n        default:\n            disposable = vscode.window.showInformationMessage(message);\n    }\n\n    if (vscode.window.messages) {\n        vscode.window.messages.push({ message, type, timeout });\n    }\n\n    if (timeout > 0 && disposable && typeof disposable.dispose === 'function') {\n        setTimeout(() => {\n            try {\n                disposable.dispose();\n            } catch (e) {\n                // Silently handle any disposal errors\n            }\n        }, timeout);\n    }\n\n    return disposable;\n}\n\nfunction normalizePythonJson(text) {\n    // 1) Normalize Python literals to JSON\n    let s = String(text)\n        .replace(/\\bTrue\\b/g, 'true')\n        .replace(/\\bFalse\\b/g, 'false')\n        .replace(/\\bNone\\b/g, 'null');\n\n    // 2) Remove Python/JS identifier(...) wrappers like HumanMessage(...)\n    //    by replacing \"<Ident>(\" with \"{\"\n    s = s.replace(/([A-Za-z_]\\w*)\\s*\\(/g, '{');\n\n    // 3) Convert the matching \")\" that close those wrappers into \"}\"\n    //    when followed by a comma, closing bracket, or closing brace.\n    s = s.replace(/\\)(\\s*[,\\]}])/g, '}$1');\n\n    // 4) Convert keyword-arg style \"key=value\" into JSON '\"key\": value'\n    s = s.replace(/([A-Za-z_]\\w*)\\s*=/g, '\"$1\": ');\n\n    // 5) Ensure unquoted dict keys become quoted: { key: ... } -> { \"key\": ... }\n    s = s.replace(/([{,]\\s*)([A-Za-z_]\\w*)(\\s*:)/g, '$1\"$2\"$3');\n\n    // 6) Convert single quotes to double quotes (strings/keys)\n    s = s.replace(/'/g, '\"');\n\n    // 7) Try to parse as JSON; if that fails, try a safe eval fallback, then return pretty JSON\n    try {\n        const parsed = JSON.parse(s);\n        return JSON.stringify(parsed, null, 4);\n    } catch(_) {\n        try {\n            const parsed = Function('return ' + s)();\n            return JSON.stringify(parsed, null, 4);\n        } catch(_) {\n            // As a last resort, return best-effort string\n            return s;\n        }\n    }\n}\n\n\nfunction unescapeJsonString(text) {\n    // Remove escaped quotes and other common escape sequences\n    return text\n        .replace(/\\\\\"/g, '\"')\n        .replace(/\\\\'/g, \"'\")\n        .replace(/\\\\\\\\/g, '\\\\')\n        .replace(/\\\\n/g, '\\n')\n        .replace(/\\\\r/g, '\\r')\n        .replace(/\\\\t/g, '\\t');\n}\n\nfunction extractAndFormatJsonSections(text) {\n    // Find potential JSON sections in the text\n    const jsonSections = [];\n    let currentLine = '';\n    let inJson = false;\n    let jsonStart = -1;\n    let bracketCount = 0;\n    let inString = false;\n    let escapeNext = false;\n\n    for (let i = 0; i < text.length; i++) {\n        const char = text[i];\n        currentLine += char;\n\n        if (escapeNext) {\n            escapeNext = false;\n            continue;\n        }\n\n        if (char === '\\\\') {\n            escapeNext = true;\n            continue;\n        }\n\n        if (char === '\"' || char === \"'\") {\n            inString = !inString;\n            continue;\n        }\n\n        if (!inString) {\n            if (char === '{' || char === '[') {\n                if (bracketCount === 0) {\n                    jsonStart = i;\n                }\n                bracketCount++;\n                inJson = true;\n            } else if (char === '}' || char === ']') {\n                bracketCount--;\n                if (bracketCount === 0 && inJson) {\n                    jsonSections.push({\n                        start: jsonStart,\n                        end: i + 1,\n                        text: text.substring(jsonStart, i + 1)\n                    });\n                    inJson = false;\n                }\n            }\n        }\n\n        if (char === '\\n' || i === text.length - 1) {\n            currentLine = '';\n        }\n    }\n\n    // No JSON sections found, return original text\n    if (jsonSections.length === 0) {\n        return text;\n    }\n\n    // Format each JSON section\n    let result = '';\n    let lastIndex = 0;\n\n    for (const section of jsonSections) {\n        // Add text before JSON section\n        result += text.substring(lastIndex, section.start);\n        \n        try {\n            // Normalize Python-style literals and try to format\n            const normalizedJson = normalizePythonJson(section.text);\n            const formattedJson = JSON.stringify(Function('return ' + normalizedJson)(), null, 4);\n            result += formattedJson;\n        } catch (e) {\n            // If formatting fails, keep original text\n            result += section.text;\n        }\n        \n        lastIndex = section.end;\n    }\n\n    // Add remaining text after last JSON section\n    result += text.substring(lastIndex);\n\n    return result;\n}\n\nfunction formatJson(jsonStr) {\n    return new Promise((resolve, reject) => {\n        if (!jsonStr || !jsonStr.trim()) {\n            reject(new Error('Invalid JSON: Empty input'));\n            return;\n        }\n\n        try {\n            // First unescape any escaped JSON strings\n            const unescapedJson = unescapeJsonString(jsonStr);\n            \n            // First try to parse as a complete JSON\n            try {\n                const normalizedJson = normalizePythonJson(unescapedJson);\n                const parsed = JSON.parse(normalizedJson);\n                resolve(JSON.stringify(parsed, null, 4));\n                return;\n            } catch (parseError) {\n                try {\n                    // Try to evaluate as a JavaScript object\n                    const normalizedJson = normalizePythonJson(unescapedJson);\n                    const parsed = Function('return ' + normalizedJson)();\n                    resolve(JSON.stringify(parsed, null, 4));\n                    return;\n                } catch (evalError) {\n                    // If both fail, try to extract and format JSON sections\n                    const formattedSections = extractAndFormatJsonSections(unescapedJson);\n                    // If no JSON sections were found and the input looks like it should be JSON\n                    if (formattedSections === unescapedJson && (unescapedJson.includes('{') || unescapedJson.includes('['))) {\n                        reject(new Error('Invalid JSON: Please check your syntax'));\n                        return;\n                    }\n                    resolve(formattedSections);\n                    return;\n                }\n            }\n        } catch (error) {\n            reject(error);\n        }\n    });\n}\n\n/**\n * @param {vscode.ExtensionContext} context\n */\nfunction activate(context) {\n    if (!vscode || !vscode.commands) {\n        return;\n    }\n\n    let disposable = vscode.commands.registerCommand('extension.formatJson', async function () {\n        let editor = vscode.window.activeTextEditor;\n        if (!editor) {\n            showMessage('No active editor found', 'warning');\n            return;\n        }\n\n        let document = editor.document;\n        let selection = editor.selection;\n\n        // Check if there is selected text\n        if (!selection.isEmpty) {\n            // Format only the selected text\n            let text = document.getText(selection);\n            if (!text.trim()) {\n                showMessage('Selected text is empty', 'warning');\n                return;\n            }\n            try {\n                let formattedJson = await formatJson(text);\n                await editor.edit(editBuilder => {\n                    editBuilder.replace(selection, formattedJson);\n                });\n                showMessage('Selected JSON formatted successfully');\n            } catch (e) {\n                showMessage(e.message, 'error');\n            }\n        } else {\n            // Format the entire document\n            const fullRange = new vscode.Range(\n                document.positionAt(0),\n                document.positionAt(document.getText().length)\n            );\n            let text = document.getText(fullRange);\n            if (!text.trim()) {\n                showMessage('Document is empty', 'warning');\n                return;\n            }\n            try {\n                let formattedJson = await formatJson(text);\n                await editor.edit(editBuilder => {\n                    editBuilder.replace(fullRange, formattedJson);\n                });\n                showMessage('Document JSON formatted successfully');\n            } catch (e) {\n                showMessage(e.message, 'error');\n            }\n        }\n    });\n\n    if (context && context.subscriptions) {\n        context.subscriptions.push(disposable);\n    }\n}\n\n// This method is called when your extension is deactivated\nfunction deactivate() {}\n\nmodule.exports = {\n    activate,\n    deactivate,\n    formatJson\n};\n\n"],
  "mappings": "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",
  "names": ["_"]
}
